@using ModelMetadata = System.Web.Mvc.ModelMetadata;
@using MvcHtmlString = System.Web.Mvc.MvcHtmlString;
@functions {

   readonly bool includeComplexProperties = false;
   readonly bool recurseComplexProperties = false; // includeComplexProperties must be true

   ModelMetadata ObjectMetadata {
      get { return ViewData.ModelMetadata; }
   }
   
   bool RenderDisplayText {
      get {
         return !recurseComplexProperties
            && ViewData.TemplateInfo.TemplateDepth > 1;
      }
   }

   string DisplayText {
      get {
         return (ObjectMetadata.Model == null) ? ObjectMetadata.NullDisplayText
            : ObjectMetadata.SimpleDisplayText;
      }
   }
   
   bool ShouldShowProperty(ModelMetadata propertyMetadata) {

      return propertyMetadata.ShowForEdit
         && (includeComplexProperties || !propertyMetadata.IsComplexType)
         && !ViewData.TemplateInfo.Visited(propertyMetadata);
   }

   MvcHtmlString Editor(ModelMetadata propertyMetadata) {

      string templateName = propertyMetadata.TemplateHint
         ?? propertyMetadata.DataTypeName;

      if (templateName == "Password") {
         /* Omit password value for security reasons */
         return Html.Password(propertyMetadata.PropertyName, null, new Dictionary<string, object> { { "class", "text-box single-line password form-control" } });
      }
            
      object additionalViewData = null;

      if (propertyMetadata.ModelType != typeof(bool)) { 
         additionalViewData = new { htmlAttributes = new { @class = "form-control" } };
      }
            
      return Html.Editor(propertyMetadata.PropertyName, templateName, additionalViewData);
   }

   string LabelText(ModelMetadata propertyMetadata) {

      return propertyMetadata.DisplayName 
         ?? propertyMetadata.PropertyName;
   }
}
@helper DefaultFormGroup(ModelMetadata property, MvcHtmlString editor) {
<div class="form-group">
   <div>
      <label for="@ViewData.TemplateInfo.GetFullHtmlFieldId(property.PropertyName)">@LabelText(property)</label>
   </div>
   <div>
      @editor
      @Html.ValidationMessage(property.PropertyName)
   </div>
</div>
}
@helper BooleanFormGroup(ModelMetadata property, MvcHtmlString editor) {
<div class="form-group">
   <div></div>
   <div>
      <div class="checkbox">
         <label>
            @editor
            @LabelText(property)
         </label>
         @Html.ValidationMessage(property.PropertyName)
      </div>
   </div>
</div>
}
@if (RenderDisplayText) {
   @DisplayText
   
} else {
   foreach (var prop in ObjectMetadata.Properties.Where(pm => ShouldShowProperty(pm))) {

      if (prop.HideSurroundingHtml) {
         @Editor(prop)

      } else {

         MvcHtmlString editor = Editor(prop);

         if (!MvcHtmlString.IsNullOrEmpty(editor)) {

            bool isBool = prop.ModelType == typeof(bool);

            if (isBool) {
               @BooleanFormGroup(prop, editor)
            } else {
               @DefaultFormGroup(prop, editor)
            }
         }
      }
   }
}