@using ModelMetadata = System.Web.Mvc.ModelMetadata;
@using MvcHtmlString = System.Web.Mvc.MvcHtmlString;
@helper DefaultFormGroup(ModelMetadata property, MvcHtmlString editor, string labelText) {
   <div class="form-group">
      <div>
         <label for="@ViewData.TemplateInfo.GetFullHtmlFieldId(property.PropertyName)">@labelText</label>
      </div>
      <div>
         @editor
         @Html.ValidationMessage(property.PropertyName)
      </div>
   </div>
}
@helper BooleanFormGroup(ModelMetadata property, MvcHtmlString editor, string labelText) {
   <div class="form-group">
      <div></div>
      <div>
         <div class="checkbox">
            <label>
               @editor
               @labelText
            </label>
            @Html.ValidationMessage(property.PropertyName)
         </div>
      </div>
   </div>
}
@if (ViewData.TemplateInfo.TemplateDepth > 1) { 
   @ViewData.ModelMetadata.SimpleDisplayText
} else {
   foreach (var prop in ViewData.ModelMetadata.Properties.Where(pm => pm.ShowForEdit && !ViewData.TemplateInfo.Visited(pm))) {
      if (prop.HideSurroundingHtml) { 
         @Html.Editor(prop.PropertyName)
      } else {
         string templateName = prop.TemplateHint ?? prop.DataTypeName;
         
         /* Omit password value for security reasons */
         var editor = (templateName == "Password") ?
            Html.Password(prop.PropertyName, null, new Dictionary<string, object> { { "class", "text-box single-line password form-control" } })
            : Html.Editor(prop.PropertyName, templateName);
         
         if (!MvcHtmlString.IsNullOrEmpty(editor)) {
            bool isBool = prop.ModelType == typeof(bool);
            string labelText = prop.DisplayName ?? prop.PropertyName;

            if (isBool) {
               @BooleanFormGroup(prop, editor, labelText)
            } else { 
               @DefaultFormGroup(prop, editor, labelText)
            }
         }
      }
   }
}