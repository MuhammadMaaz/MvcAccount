<#
// Copyright 2012 Max Toro Q.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
#>
<#@ Template Language="C#" HostSpecific="true" #>
<#@ Assembly Name="System" #>
<#@ Import Namespace="System" #>
<#@ Import Namespace="System.Collections.Generic" #>
<#@ Import Namespace="System.IO" #>
<#@ Import Namespace="System.CodeDom.Compiler" #>
<#@ Import Namespace="System.Text.RegularExpressions" #>
<#@ Import Namespace="Microsoft.CSharp" #>
<#
   string rootNamespace = System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NamespaceHint").ToString();
   string className = Path.GetFileNameWithoutExtension(this.Host.TemplateFile);
   DirectoryInfo startDirectory = Directory.CreateDirectory(this.Host.ResolvePath("Views"));
   string indent = "   ";
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace <#= rootNamespace #> {
<# 
   PushIndent(indent);
   WriteLine("");
   GenerateClass(new CSharpCodeProvider(), startDirectory, indent); 
   WriteLine("");
   PopIndent();
#>
}

<#+ string CreateValidIdentifier(CodeDomProvider codeDom, string name) {

   Regex invalidPattern = new Regex(@"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Nl}\p{Mn}\p{Mc}\p{Cf}\p{Pc}\p{Lm}]");
   
   string identifier = invalidPattern.Replace(name, "_");

   return codeDom.CreateEscapedIdentifier(identifier);
} #>

<#+ void GenerateClass(CodeDomProvider codeDom, DirectoryInfo directory, string indent, bool @public = false) { 
   
   if (@public)
      Write("public ");

   Write("static class ");
   Write(directory.Name);
   WriteLine(" {");
   PushIndent(indent);

   bool firstFile = true;

   foreach (FileInfo file in directory.EnumerateFiles()) { 
      string viewName = Path.GetFileNameWithoutExtension(file.Name);
      if (viewName == directory.Name) continue;

      if (firstFile) {
         
         WriteLine("");
         Write("public const string ");
         PushIndent(indent);

         firstFile = false;
      } else {
         Write(",");
      }

      WriteLine("");
      Write(CreateValidIdentifier(codeDom, viewName));
      Write(" = \"");
      Write(viewName);
      Write("\"");
   }

   if (!firstFile) {
      Write(";");
      PopIndent();
   }

   bool firstDir = true;

   foreach (DirectoryInfo subDirectory in directory.EnumerateDirectories()) {
      
      WriteLine("");

      if (!firstDir || !firstFile)
         WriteLine("");

      if (firstDir == true) 
         firstDir = false;

      GenerateClass(codeDom, subDirectory, indent, @public: true);
   }

   PopIndent();
   WriteLine("");
   Write("}");

} #>